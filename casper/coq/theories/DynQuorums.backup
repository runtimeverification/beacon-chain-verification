Set Warnings "-parsing".
From mathcomp.ssreflect
Require Import all_ssreflect.
Set Warnings "parsing".

From mathcomp.finmap
Require Import finmap.

From Casper
Require Import HashTree.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Open Scope fmap_scope.

(* We assume finite sets of validators *)
Parameter Validator : finType.

(* The sets of "at least 1/3 weight" validators *)
Definition quorum_1 (vs : {set Validator}) (b : Hash).

(* The sets of "at least 2/3 weight" validators *)
Parameter quorum_2 : {set {set Validator}}.



Parameter vSet : {fmap Hash -> {set Validator}}.

Axiom vs_fun : forall h : Hash, h \in vSet.

(* Examples *)
Parameter h : Hash.
Parameter hin : h \in vSet.
Check vSet.[? h].
Check vSet.[hin].

(* The set of validators who activated from vs1 to vs2 *)
Definition activated (vs1 vs2: {set Validator}): {set Validator} :=
  vs2 :\: vs1.

(* The set of validators who exited from vs1 to vs2 *)
Definition exited (vs1 vs2: {set Validator}): {set Validator} :=
  vs1 :\: vs2.

Parameter weight : {fmap {set Validator} -> nat}.

Axiom wt_fun : forall s : {set Validator}, s \in weight.
Axiom wt_zero : forall s : {set Validator}, weight.[wt_fun s] == 0 <-> s == set0.

(* The weight of new activations from vs1 to vs2 *)
Definition activated_weight (vs1 vs2: {set Validator}): nat :=
  weight.[wt_fun (activated vs1 vs2)].

Check activated_weight.

(* The weight of validators who exited from vs1 to vs2 *)
Definition exited_weight (vs1 vs2: {set Validator}): nat :=
  weight.[wt_fun (exited vs1 vs2)].


(* Meaning of an "at least 1/3 weight" quorum of validators being slashed
   in thr context of dynamic validator sets
 *)
Definition quorum_slashed_dynvset st :=
  exists (bL bR: Hash) (vL vR: {set Validator}),
    vL \subset vSet.[vs_fun bL] /\ 
    vR \subset vSet.[vs_fun bR] /\
    vL \in quorum_2 /\ 
    vR \in quorum_2 /\
    forall v, v \in vL -> v \in vR -> slashed st v.

Lemma dyn_fixed_stalshing : forall st,
  quorum_slashed_dynvset st -> quorum_slashed st.
Proof.
  intros st [bL [bR [vL [vR [HvLsubs [HvRSubs [HvLq2 [HvRq2 H]]]]]]]].
  unfold quorum_slashed.
  exists (vL :&: vR).
  split.
  quorums_intersection_property

